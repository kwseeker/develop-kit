<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒；当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="false" scanPeriod="60 seconds" debug="false">

    <!-- 定义日志的根目录 -->
    <property name="LOG_HOME" value="logs"/>
    <!--
        日志输出格式：
			%d表示日期时间，
			%-5level：级别从左显示5个字符宽度
			%thread表示线程名，
			%X{sourceThread} 表示一个可以在代码中配置的是否显示的key为sourceThread的变量占位符，MDC就是用的 %X{keyName},然后在前面加上一个%X{requestId}作为今天的测试
			%logger{24} 表示logger名字最长24个字符，否则按照句点分割。
			%msg：日志消息，
			%n是换行符
        -->
    <property name="PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} %-5level [%X{requestId}] [%thread%X{sourceThread}]%logger{24} - %msg%n"/>

    <!--Logger Appender Layout
        Logger可以看作log制造机，Appender是出口，
        Logger默认会继承父Logger的Appender，详情参考 Logback_manual_chs.pdf P12

        root 是根 Logger， 其他的logger均继承 root 的级别（除非其他logger有指定自己的级别）
        子Logger继承父Logger的级别，如有个Logger名为 X，级别为INFO，则子Logger X.Y 不指定级别时默认级别为INFO

        一个Logger可以关联多个Appender。 如果根logger有一个控制台appender，那么所有启用了的请求都至少会被打印到控制台。
        如果logger L有额外的文件appender，那么，L和L后代的所有启用了的请求都将同时打印到控制台和文件。
        设置logger的additivity为false，则可以取消这种默认的appender累积行为。
    -->
    <!--Appender是负责写记录事件的组件-->
    <!--常用的Appender：
        OutputStreamAppender把事件添加到java.io.OutputStream，是后面三个Appender的父类；
        ConsoleAppender：把事件添加到控制台，更准确地说是System.out或System.err，默认为前者。ConsoleAppender按照用户指定的encoder对事件进行格式化。
                属性： encoder(日志输出格式)、target(日志输出目标流默认为out)
        FileAppender：把记录事件添加到文件。目标文件通过File选项指定。如果文件已经存在，则根据Append属性追加或清空文件。
                属性： append(默认为叠加true，清空后添加false)、encoder、file(目标日志文件名)、prudent(安全写入模式，默认false)
        RollingFileAppender： 滚动记录文件。例如，RollingFileAppender能先记录到文件“log.txt”，然后当符合某个条件时，变成记录到其他文件。
                属性： file、append、encoder、rollingPolicy(滚动方式)、triggeringPolicy(滚动时机)、prudent
                比较常用的是根据时间滚动，隔一段时间，生成一个新的日志文件，旧的日志文件被压缩或删除
    -->

    <!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 -->
    <!--定义一个名为 STDOUT 的 ConsoleAppender，格式为-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!--encoder与Layout：
            Encoder是转换器，解析Layout，输出对应格式的日志信息。
            参考： Logback_manual_chs.pdf  6.2.3. 转换符说明    6.2.4. 格式修饰符
            "%-4relative [%thread] %-5level %logger{32} - %msg%n"
            结果：176 [main] DEBUG manual.architecture.HelloWorld2 - Hello world.
            第一个字段是自程序启动以来的逝去时间，单位是毫秒。
            第二个地段发出记录请求的线程。
            第三个字段是记录请求的级别。
            第四个字段是与记录请求关联的logger的名称。
            “-”之后是请求的消息文字。
        -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${PATTERN}</pattern>
        </encoder>
    </appender>

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/temp.log</file>
        <!--根据时间滚动-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--每天生成一个新的日志文件-->
            <fileNamePattern>${LOG_HOME}/temporary/temp-%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!--日志保存时间为7天-->
            <maxHistory>7</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${PATTERN}</pattern>
        </encoder>
    </appender>

    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--这个Appender只输出ERROR及以上级别日志-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <file>${LOG_HOME}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/error/error-%d{yyyyMMdd}.log.%i</fileNamePattern>
            <!--在时间的基础上再添加基于大小的滚动规则-->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--文件最大为500MB，超过之后滚动生成新的日志文件-->
                <maxFileSize>500MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>2</maxHistory>
        </rollingPolicy>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>${PATTERN}</Pattern>
        </layout>
    </appender>

    <appender name="SQL" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/sql.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/sql/sql-%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <maxHistory>7</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${PATTERN}</pattern>
        </encoder>
    </appender>

    <!--
		logger主要用于存放日志对象，也可以定义日志类型、级别
		name：表示匹配的logger类型前缀，也就是包的前半部分
		level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
		additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，
		false：表示只用当前logger的appender-ref，true：
		表示当前logger的appender-ref和rootLogger的appender-ref都有效
    -->
    <!-- 收集JdbcTemplate所有debug以上日志输出到SQL appender-->
    <!--<logger name="org.springframework.jdbc.core.JdbcTemplate" level="debug">-->
    <!--    <appender-ref ref="SQL"/>-->
    <!--    <appender-ref ref="STDOUT"/>-->
    <!--</logger>-->
    <!-- 收集本项目所有debug以上级别日志到 -->
    <logger name="top.kwseeker.log.calltrack" level="debug">
        <appender-ref ref="FILE"/>
        <!--默认会继承root的appender，所以下面这句不用写，写了反而会输出两次-->
        <!--<appender-ref ref="STDOUT"/>-->
    </logger>
    <!-- 不指定appender的写法,其实是默认继承root的appender -->
    <!--<logger name="org.slf4j" level="debug"/>-->

    <!--指定root Logger的 Appender(出口)
    root是一种根logger，会输出应用中所有的代码的日志（包括自己的代码和第三方库的代码），但是每一条日志只会通过一个logger，
    如果配置了一个logger 过滤我们自己开发的代码的日志，则这些日志不会再出现在root中。-->
    <root level="info">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ERROR_FILE"/>
    </root>

</configuration>